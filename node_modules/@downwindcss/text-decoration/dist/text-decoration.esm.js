var textDecorationRule = {
  '.text-decoration': {
    '--dw-td-overline': 'var(--tw-empty,/*!*/ /*!*/)',
    '--dw-td-underline': 'var(--tw-empty,/*!*/ /*!*/)',
    '--dw-td-line-through': 'var(--tw-empty,/*!*/ /*!*/)',
    '--dw-td-none': 'var(--tw-empty,/*!*/ /*!*/)',
    // Default values from MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration#formal_definition
    '--dw-td-color': 'currentcolor',
    '--dw-td-style': 'initial',
    '--dw-td-thickness': '1px',
    'text-decoration-line': /*#__PURE__*/['var(--dw-td-overline)', 'var(--dw-td-underline)', 'var(--dw-td-line-through)', 'var(--dw-td-none)'].join(' '),
    'text-decoration-color': 'var(--dw-td-color)',
    'text-decoration-style': 'var(--dw-td-style)',
    'text-decoration-thickness': 'var(--dw-td-thickness)'
  }
};

var internalPrefix = 'text-decoration-';

var _lineRules;
var lineRules = (_lineRules = {}, _lineRules["." + internalPrefix + "underline"] = {
  '--dw-td-underline': 'underline'
}, _lineRules["." + internalPrefix + "overline"] = {
  '--dw-td-overline': 'overline'
}, _lineRules["." + internalPrefix + "line-through"] = {
  '--dw-td-line-through': 'line-through'
}, _lineRules["." + internalPrefix + "none"] = {
  '--dw-td-none': 'none'
}, _lineRules);

var _styleRules;
var styleRules = (_styleRules = {}, _styleRules["." + internalPrefix + "solid"] = {
  '--dw-td-style': 'solid'
}, _styleRules["." + internalPrefix + "double"] = {
  '--dw-td-style': 'double'
}, _styleRules["." + internalPrefix + "dotted"] = {
  '--dw-td-style': 'dotted'
}, _styleRules["." + internalPrefix + "dashed"] = {
  '--dw-td-style': 'dashed'
}, _styleRules["." + internalPrefix + "wavy"] = {
  '--dw-td-style': 'wavy'
}, _styleRules["." + internalPrefix + "initial"] = {
  '--dw-td-style': 'initial'
}, _styleRules["." + internalPrefix + "inherit"] = {
  '--dw-td-style': 'inherit'
}, _styleRules);

var buildColorRules = function buildColorRules(themeColors, e) {
  return Object.keys(themeColors).reduce(function (result, themeColorName) {
    // if color is an object(containing, 50, 100, etc) then,
    //    create an array of objects
    // if color contains a string, then just add it to the result
    var themeColorValue = themeColors[themeColorName];
    var colorContainsMultipleValues = !(typeof themeColorValue === 'string');

    if (colorContainsMultipleValues) {
      Object.keys(themeColorValue).forEach(function (colorValueName) {
        var key = "." + e("" + internalPrefix + themeColorName + "-" + colorValueName);
        var value = {
          '--dw-td-color': themeColorValue[colorValueName]
        };
        result[key] = value;
      });
    } else {
      var key = "." + e("" + internalPrefix + themeColorName);
      var value = {
        '--dw-td-color': themeColorValue
      };
      result[key] = value;
    }

    return result;
  }, {});
};

var buildThicknessRules = function buildThicknessRules(thicknesses, e) {
  return Object.keys(thicknesses).reduce(function (result, thickness) {
    var key = "." + e("" + internalPrefix + thickness);
    result[key] = {
      '--dw-td-thickness': thicknesses[thickness]
    };
    return result;
  }, {});
};

var plugin = /*#__PURE__*/require('tailwindcss/plugin');

function textDecoration(_ref) {
  var addUtilities = _ref.addUtilities,
      variants = _ref.variants,
      theme = _ref.theme,
      e = _ref.e;
  var themeColors = theme('textDecorationPlugin.colors');
  var themeThicknesses = theme('textDecorationPlugin.thicknesses');
  var customVariants = variants('textDecorationPlugin');
  var colorRules = buildColorRules(themeColors, e);
  var thicknessRules = buildThicknessRules(themeThicknesses, e);
  addUtilities([textDecorationRule, lineRules, styleRules, colorRules, thicknessRules], {
    variants: customVariants
  });
}

var defaultTextDecoration = {
  theme: {
    textDecorationPlugin: function textDecorationPlugin(theme) {
      return {
        colors: theme('colors'),
        thicknesses: {
          1: '1px',
          2: '2px',
          4: '4px',
          8: '8px'
        }
      };
    }
  },
  variants: {
    textDecorationPlugin: ['responsive']
  }
};
var textDecoration$1 = /*#__PURE__*/plugin(textDecoration, defaultTextDecoration);

module.exports = textDecoration$1;
//# sourceMappingURL=text-decoration.esm.js.map
